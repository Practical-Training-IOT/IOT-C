// Code generated by Kitex v0.13.1. DO NOT EDIT.

package scene

import (
	"context"
	"errors"
	scene "github.com/Practical-Training-IOT/IOT-C/kitex_gen/iot/scene"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"List": kitex.NewMethodInfo(
		listHandler,
		newSceneListArgs,
		newSceneListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateEnable": kitex.NewMethodInfo(
		updateEnableHandler,
		newSceneUpdateEnableArgs,
		newSceneUpdateEnableResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Detail": kitex.NewMethodInfo(
		detailHandler,
		newSceneDetailArgs,
		newSceneDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	sceneServiceInfo                = NewServiceInfo()
	sceneServiceInfoForClient       = NewServiceInfoForClient()
	sceneServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return sceneServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return sceneServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return sceneServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "scene"
	handlerType := (*scene.Scene)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "scene",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func listHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*scene.SceneListArgs)
	realResult := result.(*scene.SceneListResult)
	success, err := handler.(scene.Scene).List(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSceneListArgs() interface{} {
	return scene.NewSceneListArgs()
}

func newSceneListResult() interface{} {
	return scene.NewSceneListResult()
}

func updateEnableHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*scene.SceneUpdateEnableArgs)
	realResult := result.(*scene.SceneUpdateEnableResult)
	success, err := handler.(scene.Scene).UpdateEnable(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSceneUpdateEnableArgs() interface{} {
	return scene.NewSceneUpdateEnableArgs()
}

func newSceneUpdateEnableResult() interface{} {
	return scene.NewSceneUpdateEnableResult()
}

func detailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*scene.SceneDetailArgs)
	realResult := result.(*scene.SceneDetailResult)
	success, err := handler.(scene.Scene).Detail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSceneDetailArgs() interface{} {
	return scene.NewSceneDetailArgs()
}

func newSceneDetailResult() interface{} {
	return scene.NewSceneDetailResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) List(ctx context.Context, req *scene.SceneListReq) (r *scene.SceneListRes, err error) {
	var _args scene.SceneListArgs
	_args.Req = req
	var _result scene.SceneListResult
	if err = p.c.Call(ctx, "List", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateEnable(ctx context.Context, req *scene.SceneUpdateEnableReq) (r *scene.SceneUpdateEnableRes, err error) {
	var _args scene.SceneUpdateEnableArgs
	_args.Req = req
	var _result scene.SceneUpdateEnableResult
	if err = p.c.Call(ctx, "UpdateEnable", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Detail(ctx context.Context, req *scene.SceneDetailReq) (r *scene.SceneDetailRes, err error) {
	var _args scene.SceneDetailArgs
	_args.Req = req
	var _result scene.SceneDetailResult
	if err = p.c.Call(ctx, "Detail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
