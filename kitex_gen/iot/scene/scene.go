// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package scene

import (
	"context"
	"fmt"
)

type SceneListReq struct {
}

func NewSceneListReq() *SceneListReq {
	return &SceneListReq{}
}

func (p *SceneListReq) InitDefault() {
}

func (p *SceneListReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SceneListReq(%+v)", *p)
}

var fieldIDToName_SceneListReq = map[int16]string{}

type SceneList struct {
	Id      int32  `thrift:"id,1" frugal:"1,default,i32" json:"id"`
	Title   string `thrift:"title,2" frugal:"2,default,string" json:"title"`
	Enabled bool   `thrift:"enabled,3" frugal:"3,default,bool" json:"enabled"`
	Desc    string `thrift:"desc,4" frugal:"4,default,string" json:"desc"`
	Time    string `thrift:"time,5" frugal:"5,default,string" json:"time"`
}

func NewSceneList() *SceneList {
	return &SceneList{}
}

func (p *SceneList) InitDefault() {
}

func (p *SceneList) GetId() (v int32) {
	return p.Id
}

func (p *SceneList) GetTitle() (v string) {
	return p.Title
}

func (p *SceneList) GetEnabled() (v bool) {
	return p.Enabled
}

func (p *SceneList) GetDesc() (v string) {
	return p.Desc
}

func (p *SceneList) GetTime() (v string) {
	return p.Time
}
func (p *SceneList) SetId(val int32) {
	p.Id = val
}
func (p *SceneList) SetTitle(val string) {
	p.Title = val
}
func (p *SceneList) SetEnabled(val bool) {
	p.Enabled = val
}
func (p *SceneList) SetDesc(val string) {
	p.Desc = val
}
func (p *SceneList) SetTime(val string) {
	p.Time = val
}

func (p *SceneList) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SceneList(%+v)", *p)
}

var fieldIDToName_SceneList = map[int16]string{
	1: "id",
	2: "title",
	3: "enabled",
	4: "desc",
	5: "time",
}

type SceneListRes struct {
	List []*SceneList `thrift:"list,1" frugal:"1,default,list<SceneList>" json:"list"`
}

func NewSceneListRes() *SceneListRes {
	return &SceneListRes{}
}

func (p *SceneListRes) InitDefault() {
}

func (p *SceneListRes) GetList() (v []*SceneList) {
	return p.List
}
func (p *SceneListRes) SetList(val []*SceneList) {
	p.List = val
}

func (p *SceneListRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SceneListRes(%+v)", *p)
}

var fieldIDToName_SceneListRes = map[int16]string{
	1: "list",
}

type SceneUpdateEnableReq struct {
	Id     int32 `thrift:"id,1" frugal:"1,default,i32" json:"id"`
	Enable bool  `thrift:"enable,2" frugal:"2,default,bool" json:"enable"`
}

func NewSceneUpdateEnableReq() *SceneUpdateEnableReq {
	return &SceneUpdateEnableReq{}
}

func (p *SceneUpdateEnableReq) InitDefault() {
}

func (p *SceneUpdateEnableReq) GetId() (v int32) {
	return p.Id
}

func (p *SceneUpdateEnableReq) GetEnable() (v bool) {
	return p.Enable
}
func (p *SceneUpdateEnableReq) SetId(val int32) {
	p.Id = val
}
func (p *SceneUpdateEnableReq) SetEnable(val bool) {
	p.Enable = val
}

func (p *SceneUpdateEnableReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SceneUpdateEnableReq(%+v)", *p)
}

var fieldIDToName_SceneUpdateEnableReq = map[int16]string{
	1: "id",
	2: "enable",
}

type SceneUpdateEnableRes struct {
}

func NewSceneUpdateEnableRes() *SceneUpdateEnableRes {
	return &SceneUpdateEnableRes{}
}

func (p *SceneUpdateEnableRes) InitDefault() {
}

func (p *SceneUpdateEnableRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SceneUpdateEnableRes(%+v)", *p)
}

var fieldIDToName_SceneUpdateEnableRes = map[int16]string{}

type Trigger struct {
	Mode      string `thrift:"mode,1" frugal:"1,default,string" json:"mode"`
	Event     string `thrift:"event,2" frugal:"2,default,string" json:"event"`
	Period    string `thrift:"period,3" frugal:"3,default,string" json:"period"`
	Product   string `thrift:"product,4" frugal:"4,default,string" json:"product"`
	Device    string `thrift:"device,5" frugal:"5,default,string" json:"device"`
	Func      string `thrift:"func,6" frugal:"6,default,string" json:"func"`
	Condition string `thrift:"condition,7" frugal:"7,default,string" json:"condition"`
}

func NewTrigger() *Trigger {
	return &Trigger{}
}

func (p *Trigger) InitDefault() {
}

func (p *Trigger) GetMode() (v string) {
	return p.Mode
}

func (p *Trigger) GetEvent() (v string) {
	return p.Event
}

func (p *Trigger) GetPeriod() (v string) {
	return p.Period
}

func (p *Trigger) GetProduct() (v string) {
	return p.Product
}

func (p *Trigger) GetDevice() (v string) {
	return p.Device
}

func (p *Trigger) GetFunc() (v string) {
	return p.Func
}

func (p *Trigger) GetCondition() (v string) {
	return p.Condition
}
func (p *Trigger) SetMode(val string) {
	p.Mode = val
}
func (p *Trigger) SetEvent(val string) {
	p.Event = val
}
func (p *Trigger) SetPeriod(val string) {
	p.Period = val
}
func (p *Trigger) SetProduct(val string) {
	p.Product = val
}
func (p *Trigger) SetDevice(val string) {
	p.Device = val
}
func (p *Trigger) SetFunc(val string) {
	p.Func = val
}
func (p *Trigger) SetCondition(val string) {
	p.Condition = val
}

func (p *Trigger) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Trigger(%+v)", *p)
}

var fieldIDToName_Trigger = map[int16]string{
	1: "mode",
	2: "event",
	3: "period",
	4: "product",
	5: "device",
	6: "func",
	7: "condition",
}

type Action struct {
	Type    string `thrift:"type,1" frugal:"1,default,string" json:"type"`
	Product string `thrift:"product,2" frugal:"2,default,string" json:"product"`
	Device  string `thrift:"device,3" frugal:"3,default,string" json:"device"`
	Attr    string `thrift:"attr,4" frugal:"4,default,string" json:"attr"`
	Value   string `thrift:"value,5" frugal:"5,default,string" json:"value"`
}

func NewAction() *Action {
	return &Action{}
}

func (p *Action) InitDefault() {
}

func (p *Action) GetType() (v string) {
	return p.Type
}

func (p *Action) GetProduct() (v string) {
	return p.Product
}

func (p *Action) GetDevice() (v string) {
	return p.Device
}

func (p *Action) GetAttr() (v string) {
	return p.Attr
}

func (p *Action) GetValue() (v string) {
	return p.Value
}
func (p *Action) SetType(val string) {
	p.Type = val
}
func (p *Action) SetProduct(val string) {
	p.Product = val
}
func (p *Action) SetDevice(val string) {
	p.Device = val
}
func (p *Action) SetAttr(val string) {
	p.Attr = val
}
func (p *Action) SetValue(val string) {
	p.Value = val
}

func (p *Action) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Action(%+v)", *p)
}

var fieldIDToName_Action = map[int16]string{
	1: "type",
	2: "product",
	3: "device",
	4: "attr",
	5: "value",
}

type SceneDetailRes struct {
	Name     string     `thrift:"name,1" frugal:"1,default,string" json:"name"`
	Status   string     `thrift:"status,2" frugal:"2,default,string" json:"status"`
	Time     string     `thrift:"time,3" frugal:"3,default,string" json:"time"`
	Desc     string     `thrift:"desc,4" frugal:"4,default,string" json:"desc"`
	Triggers []*Trigger `thrift:"triggers,5" frugal:"5,default,list<Trigger>" json:"triggers"`
	Actions  []*Action  `thrift:"actions,6" frugal:"6,default,list<Action>" json:"actions"`
}

func NewSceneDetailRes() *SceneDetailRes {
	return &SceneDetailRes{}
}

func (p *SceneDetailRes) InitDefault() {
}

func (p *SceneDetailRes) GetName() (v string) {
	return p.Name
}

func (p *SceneDetailRes) GetStatus() (v string) {
	return p.Status
}

func (p *SceneDetailRes) GetTime() (v string) {
	return p.Time
}

func (p *SceneDetailRes) GetDesc() (v string) {
	return p.Desc
}

func (p *SceneDetailRes) GetTriggers() (v []*Trigger) {
	return p.Triggers
}

func (p *SceneDetailRes) GetActions() (v []*Action) {
	return p.Actions
}
func (p *SceneDetailRes) SetName(val string) {
	p.Name = val
}
func (p *SceneDetailRes) SetStatus(val string) {
	p.Status = val
}
func (p *SceneDetailRes) SetTime(val string) {
	p.Time = val
}
func (p *SceneDetailRes) SetDesc(val string) {
	p.Desc = val
}
func (p *SceneDetailRes) SetTriggers(val []*Trigger) {
	p.Triggers = val
}
func (p *SceneDetailRes) SetActions(val []*Action) {
	p.Actions = val
}

func (p *SceneDetailRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SceneDetailRes(%+v)", *p)
}

var fieldIDToName_SceneDetailRes = map[int16]string{
	1: "name",
	2: "status",
	3: "time",
	4: "desc",
	5: "triggers",
	6: "actions",
}

type SceneDetailReq struct {
	Id int32 `thrift:"id,1" frugal:"1,default,i32" json:"id"`
}

func NewSceneDetailReq() *SceneDetailReq {
	return &SceneDetailReq{}
}

func (p *SceneDetailReq) InitDefault() {
}

func (p *SceneDetailReq) GetId() (v int32) {
	return p.Id
}
func (p *SceneDetailReq) SetId(val int32) {
	p.Id = val
}

func (p *SceneDetailReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SceneDetailReq(%+v)", *p)
}

var fieldIDToName_SceneDetailReq = map[int16]string{
	1: "id",
}

type Scene interface {
	List(ctx context.Context, req *SceneListReq) (r *SceneListRes, err error)

	UpdateEnable(ctx context.Context, req *SceneUpdateEnableReq) (r *SceneUpdateEnableRes, err error)

	Detail(ctx context.Context, req *SceneDetailReq) (r *SceneDetailRes, err error)
}

type SceneListArgs struct {
	Req *SceneListReq `thrift:"req,1" frugal:"1,default,SceneListReq" json:"req"`
}

func NewSceneListArgs() *SceneListArgs {
	return &SceneListArgs{}
}

func (p *SceneListArgs) InitDefault() {
}

var SceneListArgs_Req_DEFAULT *SceneListReq

func (p *SceneListArgs) GetReq() (v *SceneListReq) {
	if !p.IsSetReq() {
		return SceneListArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SceneListArgs) SetReq(val *SceneListReq) {
	p.Req = val
}

func (p *SceneListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SceneListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SceneListArgs(%+v)", *p)
}

var fieldIDToName_SceneListArgs = map[int16]string{
	1: "req",
}

type SceneListResult struct {
	Success *SceneListRes `thrift:"success,0,optional" frugal:"0,optional,SceneListRes" json:"success,omitempty"`
}

func NewSceneListResult() *SceneListResult {
	return &SceneListResult{}
}

func (p *SceneListResult) InitDefault() {
}

var SceneListResult_Success_DEFAULT *SceneListRes

func (p *SceneListResult) GetSuccess() (v *SceneListRes) {
	if !p.IsSetSuccess() {
		return SceneListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SceneListResult) SetSuccess(x interface{}) {
	p.Success = x.(*SceneListRes)
}

func (p *SceneListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SceneListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SceneListResult(%+v)", *p)
}

var fieldIDToName_SceneListResult = map[int16]string{
	0: "success",
}

type SceneUpdateEnableArgs struct {
	Req *SceneUpdateEnableReq `thrift:"req,1" frugal:"1,default,SceneUpdateEnableReq" json:"req"`
}

func NewSceneUpdateEnableArgs() *SceneUpdateEnableArgs {
	return &SceneUpdateEnableArgs{}
}

func (p *SceneUpdateEnableArgs) InitDefault() {
}

var SceneUpdateEnableArgs_Req_DEFAULT *SceneUpdateEnableReq

func (p *SceneUpdateEnableArgs) GetReq() (v *SceneUpdateEnableReq) {
	if !p.IsSetReq() {
		return SceneUpdateEnableArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SceneUpdateEnableArgs) SetReq(val *SceneUpdateEnableReq) {
	p.Req = val
}

func (p *SceneUpdateEnableArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SceneUpdateEnableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SceneUpdateEnableArgs(%+v)", *p)
}

var fieldIDToName_SceneUpdateEnableArgs = map[int16]string{
	1: "req",
}

type SceneUpdateEnableResult struct {
	Success *SceneUpdateEnableRes `thrift:"success,0,optional" frugal:"0,optional,SceneUpdateEnableRes" json:"success,omitempty"`
}

func NewSceneUpdateEnableResult() *SceneUpdateEnableResult {
	return &SceneUpdateEnableResult{}
}

func (p *SceneUpdateEnableResult) InitDefault() {
}

var SceneUpdateEnableResult_Success_DEFAULT *SceneUpdateEnableRes

func (p *SceneUpdateEnableResult) GetSuccess() (v *SceneUpdateEnableRes) {
	if !p.IsSetSuccess() {
		return SceneUpdateEnableResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SceneUpdateEnableResult) SetSuccess(x interface{}) {
	p.Success = x.(*SceneUpdateEnableRes)
}

func (p *SceneUpdateEnableResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SceneUpdateEnableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SceneUpdateEnableResult(%+v)", *p)
}

var fieldIDToName_SceneUpdateEnableResult = map[int16]string{
	0: "success",
}

type SceneDetailArgs struct {
	Req *SceneDetailReq `thrift:"req,1" frugal:"1,default,SceneDetailReq" json:"req"`
}

func NewSceneDetailArgs() *SceneDetailArgs {
	return &SceneDetailArgs{}
}

func (p *SceneDetailArgs) InitDefault() {
}

var SceneDetailArgs_Req_DEFAULT *SceneDetailReq

func (p *SceneDetailArgs) GetReq() (v *SceneDetailReq) {
	if !p.IsSetReq() {
		return SceneDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *SceneDetailArgs) SetReq(val *SceneDetailReq) {
	p.Req = val
}

func (p *SceneDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SceneDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SceneDetailArgs(%+v)", *p)
}

var fieldIDToName_SceneDetailArgs = map[int16]string{
	1: "req",
}

type SceneDetailResult struct {
	Success *SceneDetailRes `thrift:"success,0,optional" frugal:"0,optional,SceneDetailRes" json:"success,omitempty"`
}

func NewSceneDetailResult() *SceneDetailResult {
	return &SceneDetailResult{}
}

func (p *SceneDetailResult) InitDefault() {
}

var SceneDetailResult_Success_DEFAULT *SceneDetailRes

func (p *SceneDetailResult) GetSuccess() (v *SceneDetailRes) {
	if !p.IsSetSuccess() {
		return SceneDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *SceneDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*SceneDetailRes)
}

func (p *SceneDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SceneDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SceneDetailResult(%+v)", *p)
}

var fieldIDToName_SceneDetailResult = map[int16]string{
	0: "success",
}
