// Code generated by Kitex v0.13.1. DO NOT EDIT.

package ai

import (
	"context"
	"errors"
	ai "github.com/Practical-Training-IOT/IOT-C/kitex_gen/iot/ai"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"OneHistory": kitex.NewMethodInfo(
		oneHistoryHandler,
		newAiOneHistoryArgs,
		newAiOneHistoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Chat": kitex.NewMethodInfo(
		chatHandler,
		newAiChatArgs,
		newAiChatResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Change": kitex.NewMethodInfo(
		changeHandler,
		newAiChangeArgs,
		newAiChangeResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"History": kitex.NewMethodInfo(
		historyHandler,
		newAiHistoryArgs,
		newAiHistoryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	aiServiceInfo                = NewServiceInfo()
	aiServiceInfoForClient       = NewServiceInfoForClient()
	aiServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return aiServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return aiServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return aiServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ai"
	handlerType := (*ai.Ai)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "ai",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func oneHistoryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*ai.AiOneHistoryArgs)
	realResult := result.(*ai.AiOneHistoryResult)
	success, err := handler.(ai.Ai).OneHistory(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAiOneHistoryArgs() interface{} {
	return ai.NewAiOneHistoryArgs()
}

func newAiOneHistoryResult() interface{} {
	return ai.NewAiOneHistoryResult()
}

func chatHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*ai.AiChatArgs)
	realResult := result.(*ai.AiChatResult)
	success, err := handler.(ai.Ai).Chat(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAiChatArgs() interface{} {
	return ai.NewAiChatArgs()
}

func newAiChatResult() interface{} {
	return ai.NewAiChatResult()
}

func changeHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*ai.AiChangeArgs)
	realResult := result.(*ai.AiChangeResult)
	success, err := handler.(ai.Ai).Change(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAiChangeArgs() interface{} {
	return ai.NewAiChangeArgs()
}

func newAiChangeResult() interface{} {
	return ai.NewAiChangeResult()
}

func historyHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*ai.AiHistoryArgs)
	realResult := result.(*ai.AiHistoryResult)
	success, err := handler.(ai.Ai).History(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newAiHistoryArgs() interface{} {
	return ai.NewAiHistoryArgs()
}

func newAiHistoryResult() interface{} {
	return ai.NewAiHistoryResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) OneHistory(ctx context.Context, req *ai.OneHistoryRequest) (r *ai.OneHistoryResponse, err error) {
	var _args ai.AiOneHistoryArgs
	_args.Req = req
	var _result ai.AiOneHistoryResult
	if err = p.c.Call(ctx, "OneHistory", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Chat(ctx context.Context, req *ai.ChatRequest) (r *ai.ChatResponse, err error) {
	var _args ai.AiChatArgs
	_args.Req = req
	var _result ai.AiChatResult
	if err = p.c.Call(ctx, "Chat", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Change(ctx context.Context, req *ai.ChangeRequest) (r *ai.ChangeResponse, err error) {
	var _args ai.AiChangeArgs
	_args.Req = req
	var _result ai.AiChangeResult
	if err = p.c.Call(ctx, "Change", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) History(ctx context.Context, req *ai.HistoryRequest) (r *ai.HistoryResponse, err error) {
	var _args ai.AiHistoryArgs
	_args.Req = req
	var _result ai.AiHistoryResult
	if err = p.c.Call(ctx, "History", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
