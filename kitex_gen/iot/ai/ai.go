// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package ai

import (
	"context"
	"fmt"
)

type ChatResponse struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
	Model   string `thrift:"model,2" frugal:"2,default,string" json:"model"`
	Id      int64  `thrift:"id,3" frugal:"3,default,i64" json:"id"`
}

func NewChatResponse() *ChatResponse {
	return &ChatResponse{}
}

func (p *ChatResponse) InitDefault() {
}

func (p *ChatResponse) GetMessage() (v string) {
	return p.Message
}

func (p *ChatResponse) GetModel() (v string) {
	return p.Model
}

func (p *ChatResponse) GetId() (v int64) {
	return p.Id
}
func (p *ChatResponse) SetMessage(val string) {
	p.Message = val
}
func (p *ChatResponse) SetModel(val string) {
	p.Model = val
}
func (p *ChatResponse) SetId(val int64) {
	p.Id = val
}

func (p *ChatResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatResponse(%+v)", *p)
}

var fieldIDToName_ChatResponse = map[int16]string{
	1: "message",
	2: "model",
	3: "id",
}

type ChatRequest struct {
	Id      int32  `thrift:"id,1" frugal:"1,default,i32" json:"id"`
	Message string `thrift:"message,2" frugal:"2,default,string" json:"message"`
	UserId  int32  `thrift:"userId,3" frugal:"3,default,i32" json:"userId"`
}

func NewChatRequest() *ChatRequest {
	return &ChatRequest{}
}

func (p *ChatRequest) InitDefault() {
}

func (p *ChatRequest) GetId() (v int32) {
	return p.Id
}

func (p *ChatRequest) GetMessage() (v string) {
	return p.Message
}

func (p *ChatRequest) GetUserId() (v int32) {
	return p.UserId
}
func (p *ChatRequest) SetId(val int32) {
	p.Id = val
}
func (p *ChatRequest) SetMessage(val string) {
	p.Message = val
}
func (p *ChatRequest) SetUserId(val int32) {
	p.UserId = val
}

func (p *ChatRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatRequest(%+v)", *p)
}

var fieldIDToName_ChatRequest = map[int16]string{
	1: "id",
	2: "message",
	3: "userId",
}

type OneHistoryRequest struct {
	Id     int32 `thrift:"id,1" frugal:"1,default,i32" json:"id"`
	UserId int32 `thrift:"userId,2" frugal:"2,default,i32" json:"userId"`
}

func NewOneHistoryRequest() *OneHistoryRequest {
	return &OneHistoryRequest{}
}

func (p *OneHistoryRequest) InitDefault() {
}

func (p *OneHistoryRequest) GetId() (v int32) {
	return p.Id
}

func (p *OneHistoryRequest) GetUserId() (v int32) {
	return p.UserId
}
func (p *OneHistoryRequest) SetId(val int32) {
	p.Id = val
}
func (p *OneHistoryRequest) SetUserId(val int32) {
	p.UserId = val
}

func (p *OneHistoryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OneHistoryRequest(%+v)", *p)
}

var fieldIDToName_OneHistoryRequest = map[int16]string{
	1: "id",
	2: "userId",
}

type ChatOneResponse struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
	Req     string `thrift:"req,2" frugal:"2,default,string" json:"req"`
	Model   string `thrift:"model,3" frugal:"3,default,string" json:"model"`
	Id      int64  `thrift:"id,4" frugal:"4,default,i64" json:"id"`
}

func NewChatOneResponse() *ChatOneResponse {
	return &ChatOneResponse{}
}

func (p *ChatOneResponse) InitDefault() {
}

func (p *ChatOneResponse) GetMessage() (v string) {
	return p.Message
}

func (p *ChatOneResponse) GetReq() (v string) {
	return p.Req
}

func (p *ChatOneResponse) GetModel() (v string) {
	return p.Model
}

func (p *ChatOneResponse) GetId() (v int64) {
	return p.Id
}
func (p *ChatOneResponse) SetMessage(val string) {
	p.Message = val
}
func (p *ChatOneResponse) SetReq(val string) {
	p.Req = val
}
func (p *ChatOneResponse) SetModel(val string) {
	p.Model = val
}
func (p *ChatOneResponse) SetId(val int64) {
	p.Id = val
}

func (p *ChatOneResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatOneResponse(%+v)", *p)
}

var fieldIDToName_ChatOneResponse = map[int16]string{
	1: "message",
	2: "req",
	3: "model",
	4: "id",
}

type OneHistoryResponse struct {
	Chat []*ChatOneResponse `thrift:"chat,1" frugal:"1,default,list<ChatOneResponse>" json:"chat"`
	Id   int64              `thrift:"id,2" frugal:"2,default,i64" json:"id"`
}

func NewOneHistoryResponse() *OneHistoryResponse {
	return &OneHistoryResponse{}
}

func (p *OneHistoryResponse) InitDefault() {
}

func (p *OneHistoryResponse) GetChat() (v []*ChatOneResponse) {
	return p.Chat
}

func (p *OneHistoryResponse) GetId() (v int64) {
	return p.Id
}
func (p *OneHistoryResponse) SetChat(val []*ChatOneResponse) {
	p.Chat = val
}
func (p *OneHistoryResponse) SetId(val int64) {
	p.Id = val
}

func (p *OneHistoryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OneHistoryResponse(%+v)", *p)
}

var fieldIDToName_OneHistoryResponse = map[int16]string{
	1: "chat",
	2: "id",
}

type ChangeRequest struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
}

func NewChangeRequest() *ChangeRequest {
	return &ChangeRequest{}
}

func (p *ChangeRequest) InitDefault() {
}

func (p *ChangeRequest) GetMessage() (v string) {
	return p.Message
}
func (p *ChangeRequest) SetMessage(val string) {
	p.Message = val
}

func (p *ChangeRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeRequest(%+v)", *p)
}

var fieldIDToName_ChangeRequest = map[int16]string{
	1: "message",
}

type ChangeResponse struct {
}

func NewChangeResponse() *ChangeResponse {
	return &ChangeResponse{}
}

func (p *ChangeResponse) InitDefault() {
}

func (p *ChangeResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeResponse(%+v)", *p)
}

var fieldIDToName_ChangeResponse = map[int16]string{}

type History struct {
	Id        int32  `thrift:"id,1" frugal:"1,default,i32" json:"id"`
	Title     string `thrift:"title,2" frugal:"2,default,string" json:"title"`
	CreatedAt string `thrift:"created_at,3" frugal:"3,default,string" json:"created_at"`
}

func NewHistory() *History {
	return &History{}
}

func (p *History) InitDefault() {
}

func (p *History) GetId() (v int32) {
	return p.Id
}

func (p *History) GetTitle() (v string) {
	return p.Title
}

func (p *History) GetCreatedAt() (v string) {
	return p.CreatedAt
}
func (p *History) SetId(val int32) {
	p.Id = val
}
func (p *History) SetTitle(val string) {
	p.Title = val
}
func (p *History) SetCreatedAt(val string) {
	p.CreatedAt = val
}

func (p *History) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("History(%+v)", *p)
}

var fieldIDToName_History = map[int16]string{
	1: "id",
	2: "title",
	3: "created_at",
}

type HistoryResponse struct {
	List []*History `thrift:"list,1" frugal:"1,default,list<History>" json:"list"`
}

func NewHistoryResponse() *HistoryResponse {
	return &HistoryResponse{}
}

func (p *HistoryResponse) InitDefault() {
}

func (p *HistoryResponse) GetList() (v []*History) {
	return p.List
}
func (p *HistoryResponse) SetList(val []*History) {
	p.List = val
}

func (p *HistoryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryResponse(%+v)", *p)
}

var fieldIDToName_HistoryResponse = map[int16]string{
	1: "list",
}

type HistoryRequest struct {
	UserId int32 `thrift:"userId,1" frugal:"1,default,i32" json:"userId"`
}

func NewHistoryRequest() *HistoryRequest {
	return &HistoryRequest{}
}

func (p *HistoryRequest) InitDefault() {
}

func (p *HistoryRequest) GetUserId() (v int32) {
	return p.UserId
}
func (p *HistoryRequest) SetUserId(val int32) {
	p.UserId = val
}

func (p *HistoryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HistoryRequest(%+v)", *p)
}

var fieldIDToName_HistoryRequest = map[int16]string{
	1: "userId",
}

type Ai interface {
	OneHistory(ctx context.Context, req *OneHistoryRequest) (r *OneHistoryResponse, err error)

	Chat(ctx context.Context, req *ChatRequest) (r *ChatResponse, err error)

	Change(ctx context.Context, req *ChangeRequest) (r *ChangeResponse, err error)

	History(ctx context.Context, req *HistoryRequest) (r *HistoryResponse, err error)
}

type AiOneHistoryArgs struct {
	Req *OneHistoryRequest `thrift:"req,1" frugal:"1,default,OneHistoryRequest" json:"req"`
}

func NewAiOneHistoryArgs() *AiOneHistoryArgs {
	return &AiOneHistoryArgs{}
}

func (p *AiOneHistoryArgs) InitDefault() {
}

var AiOneHistoryArgs_Req_DEFAULT *OneHistoryRequest

func (p *AiOneHistoryArgs) GetReq() (v *OneHistoryRequest) {
	if !p.IsSetReq() {
		return AiOneHistoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AiOneHistoryArgs) SetReq(val *OneHistoryRequest) {
	p.Req = val
}

func (p *AiOneHistoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AiOneHistoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AiOneHistoryArgs(%+v)", *p)
}

var fieldIDToName_AiOneHistoryArgs = map[int16]string{
	1: "req",
}

type AiOneHistoryResult struct {
	Success *OneHistoryResponse `thrift:"success,0,optional" frugal:"0,optional,OneHistoryResponse" json:"success,omitempty"`
}

func NewAiOneHistoryResult() *AiOneHistoryResult {
	return &AiOneHistoryResult{}
}

func (p *AiOneHistoryResult) InitDefault() {
}

var AiOneHistoryResult_Success_DEFAULT *OneHistoryResponse

func (p *AiOneHistoryResult) GetSuccess() (v *OneHistoryResponse) {
	if !p.IsSetSuccess() {
		return AiOneHistoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AiOneHistoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*OneHistoryResponse)
}

func (p *AiOneHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AiOneHistoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AiOneHistoryResult(%+v)", *p)
}

var fieldIDToName_AiOneHistoryResult = map[int16]string{
	0: "success",
}

type AiChatArgs struct {
	Req *ChatRequest `thrift:"req,1" frugal:"1,default,ChatRequest" json:"req"`
}

func NewAiChatArgs() *AiChatArgs {
	return &AiChatArgs{}
}

func (p *AiChatArgs) InitDefault() {
}

var AiChatArgs_Req_DEFAULT *ChatRequest

func (p *AiChatArgs) GetReq() (v *ChatRequest) {
	if !p.IsSetReq() {
		return AiChatArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AiChatArgs) SetReq(val *ChatRequest) {
	p.Req = val
}

func (p *AiChatArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AiChatArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AiChatArgs(%+v)", *p)
}

var fieldIDToName_AiChatArgs = map[int16]string{
	1: "req",
}

type AiChatResult struct {
	Success *ChatResponse `thrift:"success,0,optional" frugal:"0,optional,ChatResponse" json:"success,omitempty"`
}

func NewAiChatResult() *AiChatResult {
	return &AiChatResult{}
}

func (p *AiChatResult) InitDefault() {
}

var AiChatResult_Success_DEFAULT *ChatResponse

func (p *AiChatResult) GetSuccess() (v *ChatResponse) {
	if !p.IsSetSuccess() {
		return AiChatResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AiChatResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChatResponse)
}

func (p *AiChatResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AiChatResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AiChatResult(%+v)", *p)
}

var fieldIDToName_AiChatResult = map[int16]string{
	0: "success",
}

type AiChangeArgs struct {
	Req *ChangeRequest `thrift:"req,1" frugal:"1,default,ChangeRequest" json:"req"`
}

func NewAiChangeArgs() *AiChangeArgs {
	return &AiChangeArgs{}
}

func (p *AiChangeArgs) InitDefault() {
}

var AiChangeArgs_Req_DEFAULT *ChangeRequest

func (p *AiChangeArgs) GetReq() (v *ChangeRequest) {
	if !p.IsSetReq() {
		return AiChangeArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AiChangeArgs) SetReq(val *ChangeRequest) {
	p.Req = val
}

func (p *AiChangeArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AiChangeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AiChangeArgs(%+v)", *p)
}

var fieldIDToName_AiChangeArgs = map[int16]string{
	1: "req",
}

type AiChangeResult struct {
	Success *ChangeResponse `thrift:"success,0,optional" frugal:"0,optional,ChangeResponse" json:"success,omitempty"`
}

func NewAiChangeResult() *AiChangeResult {
	return &AiChangeResult{}
}

func (p *AiChangeResult) InitDefault() {
}

var AiChangeResult_Success_DEFAULT *ChangeResponse

func (p *AiChangeResult) GetSuccess() (v *ChangeResponse) {
	if !p.IsSetSuccess() {
		return AiChangeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AiChangeResult) SetSuccess(x interface{}) {
	p.Success = x.(*ChangeResponse)
}

func (p *AiChangeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AiChangeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AiChangeResult(%+v)", *p)
}

var fieldIDToName_AiChangeResult = map[int16]string{
	0: "success",
}

type AiHistoryArgs struct {
	Req *HistoryRequest `thrift:"req,1" frugal:"1,default,HistoryRequest" json:"req"`
}

func NewAiHistoryArgs() *AiHistoryArgs {
	return &AiHistoryArgs{}
}

func (p *AiHistoryArgs) InitDefault() {
}

var AiHistoryArgs_Req_DEFAULT *HistoryRequest

func (p *AiHistoryArgs) GetReq() (v *HistoryRequest) {
	if !p.IsSetReq() {
		return AiHistoryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AiHistoryArgs) SetReq(val *HistoryRequest) {
	p.Req = val
}

func (p *AiHistoryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AiHistoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AiHistoryArgs(%+v)", *p)
}

var fieldIDToName_AiHistoryArgs = map[int16]string{
	1: "req",
}

type AiHistoryResult struct {
	Success *HistoryResponse `thrift:"success,0,optional" frugal:"0,optional,HistoryResponse" json:"success,omitempty"`
}

func NewAiHistoryResult() *AiHistoryResult {
	return &AiHistoryResult{}
}

func (p *AiHistoryResult) InitDefault() {
}

var AiHistoryResult_Success_DEFAULT *HistoryResponse

func (p *AiHistoryResult) GetSuccess() (v *HistoryResponse) {
	if !p.IsSetSuccess() {
		return AiHistoryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AiHistoryResult) SetSuccess(x interface{}) {
	p.Success = x.(*HistoryResponse)
}

func (p *AiHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AiHistoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AiHistoryResult(%+v)", *p)
}

var fieldIDToName_AiHistoryResult = map[int16]string{
	0: "success",
}
