// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package user

import (
	"context"
	"fmt"
)

type RegisterReq struct {
	UserName string `thrift:"userName,1" frugal:"1,default,string" json:"userName"`
}

func NewRegisterReq() *RegisterReq {
	return &RegisterReq{}
}

func (p *RegisterReq) InitDefault() {
}

func (p *RegisterReq) GetUserName() (v string) {
	return p.UserName
}
func (p *RegisterReq) SetUserName(val string) {
	p.UserName = val
}

func (p *RegisterReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterReq(%+v)", *p)
}

var fieldIDToName_RegisterReq = map[int16]string{
	1: "userName",
}

type RegisterRes struct {
	Id int32 `thrift:"id,1" frugal:"1,default,i32" json:"id"`
}

func NewRegisterRes() *RegisterRes {
	return &RegisterRes{}
}

func (p *RegisterRes) InitDefault() {
}

func (p *RegisterRes) GetId() (v int32) {
	return p.Id
}
func (p *RegisterRes) SetId(val int32) {
	p.Id = val
}

func (p *RegisterRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterRes(%+v)", *p)
}

var fieldIDToName_RegisterRes = map[int16]string{
	1: "id",
}

type User interface {
	Register(ctx context.Context, req *RegisterReq) (r *RegisterRes, err error)
}

type UserRegisterArgs struct {
	Req *RegisterReq `thrift:"req,1" frugal:"1,default,RegisterReq" json:"req"`
}

func NewUserRegisterArgs() *UserRegisterArgs {
	return &UserRegisterArgs{}
}

func (p *UserRegisterArgs) InitDefault() {
}

var UserRegisterArgs_Req_DEFAULT *RegisterReq

func (p *UserRegisterArgs) GetReq() (v *RegisterReq) {
	if !p.IsSetReq() {
		return UserRegisterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *UserRegisterArgs) SetReq(val *RegisterReq) {
	p.Req = val
}

func (p *UserRegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UserRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserRegisterArgs(%+v)", *p)
}

var fieldIDToName_UserRegisterArgs = map[int16]string{
	1: "req",
}

type UserRegisterResult struct {
	Success *RegisterRes `thrift:"success,0,optional" frugal:"0,optional,RegisterRes" json:"success,omitempty"`
}

func NewUserRegisterResult() *UserRegisterResult {
	return &UserRegisterResult{}
}

func (p *UserRegisterResult) InitDefault() {
}

var UserRegisterResult_Success_DEFAULT *RegisterRes

func (p *UserRegisterResult) GetSuccess() (v *RegisterRes) {
	if !p.IsSetSuccess() {
		return UserRegisterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *UserRegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*RegisterRes)
}

func (p *UserRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UserRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserRegisterResult(%+v)", *p)
}

var fieldIDToName_UserRegisterResult = map[int16]string{
	0: "success",
}
